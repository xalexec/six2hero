{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/MasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ~0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MasterChef is Ownable {\n    struct UserInfo {\n        // How many LP tokens the user has provided.\n        uint256 amount;\n        // Reward debt.\n        uint256 rewardDebt;\n    }\n\n    struct PoolInfo {\n        // Address of LP token contract.\n        IERC20 lpToken;\n        // lp balance\n        uint256 balance;\n        // How many allocation points assigned to this pool. EGGs to distribute per block.\n        uint128 allocPoint;\n        // Last block number that EGGs distribution occurs.\n        uint256 lastRewardBlock;\n        // Accumulated EGGs per share, times 1e12.\n        uint256 accEggPerShare;\n        // The block number when EGG mining starts.\n        uint256 startBlock;\n    }\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    IERC20 public eggToken;\n    // EGG tokens created per block.\n    uint128 public eggPerBlock;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint128 public totalAllocPoint;\n    // foundationBalance\n    uint256 public foundationBalance;\n    // foundation deduct a percentage\n    uint64 public foundationProportion;\n    // foundation address\n    address public foundation;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // View function to see pending EGGs on frontend.\n    function pendingEgg(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accEggPerShare = pool.accEggPerShare;\n        uint256 lpSupply = pool.balance;\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = block.number - pool.lastRewardBlock;\n            uint256 eggReward = (multiplier * eggPerBlock * pool.allocPoint) / totalAllocPoint;\n            accEggPerShare = accEggPerShare + (eggReward * 1e12) / lpSupply;\n        }\n        return (user.amount * accEggPerShare) / 1e12 - user.rewardDebt;\n    }\n\n    function setRunEnv(\n        IERC20 _eggAddress,\n        uint128 _eggPerBlock,\n        address _foundation,\n        uint64 _foundationProportion\n    ) external onlyOwner {\n        eggToken = _eggAddress;\n        eggPerBlock = _eggPerBlock;\n        foundation = _foundation;\n        foundationProportion = _foundationProportion;\n    }\n\n    function add(uint128 _allocPoint, IERC20 _lpToken, uint256 _startBlock, bool _withUpdate) external onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                balance: 0,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accEggPerShare: 0,\n                startBlock: _startBlock\n            })\n        );\n    }\n\n    function set(uint256 _pid, uint128 _allocPoint, bool _withUpdate) external onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint128 prevAllocPoint = poolInfo[_pid].allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n\n        if (prevAllocPoint != _allocPoint) {\n            totalAllocPoint = totalAllocPoint - prevAllocPoint + _allocPoint;\n        }\n    }\n\n    // Deposit LP tokens to MasterChef for EGG allocation.\n    function deposit(uint256 _pid, uint256 _amount) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = (user.amount * pool.accEggPerShare) / 1e12 - user.rewardDebt;\n            if (pending > 0) {\n                eggToken.transfer(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\n            pool.balance += _amount;\n            user.amount += _amount;\n        }\n        user.rewardDebt = (user.amount * pool.accEggPerShare) / 1e12;\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n\n        updatePool(_pid);\n        uint256 pending = (user.amount * pool.accEggPerShare) / 1e12 - user.rewardDebt;\n        if (pending > 0) {\n            eggToken.transfer(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount -= _amount;\n            pool.balance -= _amount;\n            pool.lpToken.transfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = (user.amount * pool.accEggPerShare) / 1e12;\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    function harvest(uint256 _pid) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 accumulated = (user.amount * pool.accEggPerShare) / 1e12;\n            uint256 pending = accumulated - user.rewardDebt;\n            if (pending > 0) {\n                eggToken.transfer(msg.sender, pending);\n            }\n            user.rewardDebt = accumulated;\n            emit Harvest(msg.sender, _pid, pending);\n        }\n    }\n\n    // update foundation address\n    function updateFoundation(address _foundation) external {\n        require(msg.sender == foundation, \"only foundation\");\n        foundation = _foundation;\n    }\n\n    // withdraw foundation balance\n    function withdrawFoundation() external {\n        eggToken.transfer(foundation, foundationBalance);\n        foundationBalance = 0;\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.balance -= user.amount;\n        pool.lpToken.transfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.balance;\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = block.number - pool.lastRewardBlock;\n        uint256 eggReward = (multiplier * eggPerBlock * pool.allocPoint) / totalAllocPoint;\n        pool.accEggPerShare = pool.accEggPerShare + (eggReward * 1e12) / lpSupply;\n        pool.lastRewardBlock = block.number;\n        foundationBalance += eggReward / foundationProportion;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}