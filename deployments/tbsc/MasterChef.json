{
  "address": "0xC3940eA3af4ab51bC9BA95019FC7B1Bc6E060e15",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_allocPoint",
          "type": "uint128"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eggPerBlock",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eggToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundationBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundationProportion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingEgg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "allocPoint",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accEggPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_allocPoint",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_eggAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_eggPerBlock",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_foundation",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_foundationProportion",
          "type": "uint64"
        }
      ],
      "name": "setRunEnv",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_foundation",
          "type": "address"
        }
      ],
      "name": "updateFoundation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFoundation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xac995a9c95d36ed082a33e84889b4cb4873602c7c8b376d436af6f43cee9af9e",
  "receipt": {
    "to": null,
    "from": "0xbDB51759a16eACA7E4aC6F4B9167bE78c0499e76",
    "contractAddress": "0xC3940eA3af4ab51bC9BA95019FC7B1Bc6E060e15",
    "transactionIndex": 3,
    "gasUsed": "1349268",
    "logsBloom": "0x
    "blockHash": "0x8b972248a8f6b7af4dd7aebb54da1f083cfc11e23dd1f135a63051504a912247",
    "transactionHash": "0xac995a9c95d36ed082a33e84889b4cb4873602c7c8b376d436af6f43cee9af9e",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 28234509,
        "transactionHash": "0xac995a9c95d36ed082a33e84889b4cb4873602c7c8b376d436af6f43cee9af9e",
        "address": "0xC3940eA3af4ab51bC9BA95019FC7B1Bc6E060e15",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bdb51759a16eaca7e4ac6f4b9167be78c0499e76"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x8b972248a8f6b7af4dd7aebb54da1f083cfc11e23dd1f135a63051504a912247"
      }
    ],
    "blockNumber": 28234509,
    "cumulativeGasUsed": "1499054",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "902d6280a834f922619934d33fb86331",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggPerBlock\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationProportion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingEgg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEggPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_eggAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_eggPerBlock\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_foundation\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_foundationProportion\",\"type\":\"uint64\"}],\"name\":\"setRunEnv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundation\",\"type\":\"address\"}],\"name\":\"updateFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MasterChef.sol\":\"MasterChef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ~0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MasterChef is Ownable {\\n    struct UserInfo {\\n        // How many LP tokens the user has provided.\\n        uint256 amount;\\n        // Reward debt.\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        // Address of LP token contract.\\n        IERC20 lpToken;\\n        // lp balance\\n        uint256 balance;\\n        // How many allocation points assigned to this pool. EGGs to distribute per block.\\n        uint128 allocPoint;\\n        // Last block number that EGGs distribution occurs.\\n        uint256 lastRewardBlock;\\n        // Accumulated EGGs per share, times 1e12.\\n        uint256 accEggPerShare;\\n        // The block number when EGG mining starts.\\n        uint256 startBlock;\\n    }\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    IERC20 public eggToken;\\n    // EGG tokens created per block.\\n    uint128 public eggPerBlock;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint128 public totalAllocPoint;\\n    // foundationBalance\\n    uint256 public foundationBalance;\\n    // foundation deduct a percentage\\n    uint64 public foundationProportion;\\n    // foundation address\\n    address public foundation;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // View function to see pending EGGs on frontend.\\n    function pendingEgg(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEggPerShare = pool.accEggPerShare;\\n        uint256 lpSupply = pool.balance;\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = block.number - pool.lastRewardBlock;\\n            uint256 eggReward = (multiplier * eggPerBlock * pool.allocPoint) / totalAllocPoint;\\n            accEggPerShare = accEggPerShare + (eggReward * 1e12) / lpSupply;\\n        }\\n        return (user.amount * accEggPerShare) / 1e12 - user.rewardDebt;\\n    }\\n\\n    function setRunEnv(\\n        IERC20 _eggAddress,\\n        uint128 _eggPerBlock,\\n        address _foundation,\\n        uint64 _foundationProportion\\n    ) external onlyOwner {\\n        eggToken = _eggAddress;\\n        eggPerBlock = _eggPerBlock;\\n        foundation = _foundation;\\n        foundationProportion = _foundationProportion;\\n    }\\n\\n    function add(uint128 _allocPoint, IERC20 _lpToken, uint256 _startBlock, bool _withUpdate) external onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                balance: 0,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEggPerShare: 0,\\n                startBlock: _startBlock\\n            })\\n        );\\n    }\\n\\n    function set(uint256 _pid, uint128 _allocPoint, bool _withUpdate) external onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint128 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint - prevAllocPoint + _allocPoint;\\n        }\\n    }\\n\\n    // Deposit LP tokens to MasterChef for EGG allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = (user.amount * pool.accEggPerShare) / 1e12 - user.rewardDebt;\\n            if (pending > 0) {\\n                eggToken.transfer(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\\n            pool.balance += _amount;\\n            user.amount += _amount;\\n        }\\n        user.rewardDebt = (user.amount * pool.accEggPerShare) / 1e12;\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n        uint256 pending = (user.amount * pool.accEggPerShare) / 1e12 - user.rewardDebt;\\n        if (pending > 0) {\\n            eggToken.transfer(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            pool.balance -= _amount;\\n            pool.lpToken.transfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = (user.amount * pool.accEggPerShare) / 1e12;\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    function harvest(uint256 _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 accumulated = (user.amount * pool.accEggPerShare) / 1e12;\\n            uint256 pending = accumulated - user.rewardDebt;\\n            if (pending > 0) {\\n                eggToken.transfer(msg.sender, pending);\\n            }\\n            user.rewardDebt = accumulated;\\n            emit Harvest(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // update foundation address\\n    function updateFoundation(address _foundation) external {\\n        require(msg.sender == foundation, \\\"only foundation\\\");\\n        foundation = _foundation;\\n    }\\n\\n    // withdraw foundation balance\\n    function withdrawFoundation() external {\\n        eggToken.transfer(foundation, foundationBalance);\\n        foundationBalance = 0;\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.balance -= user.amount;\\n        pool.lpToken.transfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.balance;\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = block.number - pool.lastRewardBlock;\\n        uint256 eggReward = (multiplier * eggPerBlock * pool.allocPoint) / totalAllocPoint;\\n        pool.accEggPerShare = pool.accEggPerShare + (eggReward * 1e12) / lpSupply;\\n        pool.lastRewardBlock = block.number;\\n        foundationBalance += eggReward / foundationProportion;\\n    }\\n}\\n\",\"keccak256\":\"0xd587b0a362699dc556728ec4367430001dd442b720539d53433f2080b1bafc72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c80638da5cb5b116100e3578063b8c7c65a1161008c578063e2bbb15811610066578063e2bbb158146103db578063f2fde38b146103ee578063f456426f1461040157600080fd5b8063b8c7c65a146103ac578063c3ab2510146103b5578063ddc63262146103c857600080fd5b80639437e8e1116100bd5780639437e8e11461037e57806399119d2214610386578063a1a4d4a41461039957600080fd5b80638da5cb5b146103135780639214bd831461032457806393f1a40b1461033757600080fd5b8063441a3e7011610145578063630b5ba11161011f578063630b5ba1146102d6578063715018a6146102de57806372dcfb0a146102e657600080fd5b8063441a3e701461029d57806351eb05a6146102b05780635312ea8e146102c357600080fd5b806317caf6f11161017657806317caf6f1146102215780633ffdd83e1461025357806341fbb0501461026657600080fd5b8063081e3eda1461019d5780630e894127146101b45780631526fe27146101c9575b600080fd5b6001545b6040519081526020015b60405180910390f35b6101c76101c236600461141e565b610414565b005b6101dc6101d736600461145e565b610509565b604080516001600160a01b03909716875260208701959095526001600160801b03909316938501939093526060840152608083019190915260a082015260c0016101ab565b60045461023b90600160801b90046001600160801b031681565b6040516001600160801b0390911681526020016101ab565b6101c761026136600461148c565b610563565b600654610285906801000000000000000090046001600160a01b031681565b6040516001600160a01b0390911681526020016101ab565b6101c76102ab3660046114f3565b61062d565b6101c76102be36600461145e565b610892565b6101c76102d136600461145e565b61099e565b6101c7610ab9565b6101c7610ae4565b6006546102fa9067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101ab565b6000546001600160a01b0316610285565b6101c7610332366004611515565b610af8565b61036961034536600461155b565b60026020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101ab565b6101c7610cd1565b600354610285906001600160a01b031681565b60045461023b906001600160801b031681565b6101a160055481565b6101c76103c336600461158b565b610d62565b6101c76103d636600461145e565b610e0e565b6101c76103e93660046114f3565b610f54565b6101c76103fc36600461158b565b611187565b6101a161040f36600461155b565b611217565b61041c61133d565b801561042a5761042a610ab9565b60006001848154811061043f5761043f6115af565b906000526020600020906006020160020160009054906101000a90046001600160801b03169050826001858154811061047a5761047a6115af565b6000918252602090912060069091020160020180546fffffffffffffffffffffffffffffffff19166001600160801b03928316179055838116908216146105035760045483906104db908390600160801b90046001600160801b03166115db565b6104e59190611602565b600480546001600160801b03928316600160801b0292169190911790555b50505050565b6001818154811061051957600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03909416955091936001600160801b039091169286565b61056b61133d565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03958616179055600480546fffffffffffffffffffffffffffffffff19166001600160801b039490941693909317909255600680547fffffffff00000000000000000000000000000000000000000000000000000000166801000000000000000092909416919091027fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169290921767ffffffffffffffff909116179055565b600060018381548110610642576106426115af565b6000918252602080832086845260028252604080852033865290925292208054600690920290920192508311156106c05760405162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f64000000000000000000000000000060448201526064015b60405180910390fd5b6106c984610892565b6000816001015464e8d4a51000846004015484600001546106ea9190611622565b6106f49190611639565b6106fe919061165b565b9050801561077d5760035460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b919061166e565b505b831561082d5783826000016000828254610797919061165b565b92505081905550838360010160008282546107b2919061165b565b9091555050825460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082b919061166e565b505b6004830154825464e8d4a510009161084491611622565b61084e9190611639565b6001830155604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a35050505050565b6000600182815481106108a7576108a76115af565b90600052602060002090600602019050806003015443116108c6575050565b600181015460008190036108df57504360039091015550565b60008260030154436108f1919061165b565b60045460028501549192506000916001600160801b03600160801b830481169291811691610920911685611622565b61092a9190611622565b6109349190611639565b9050826109468264e8d4a51000611622565b6109509190611639565b846004015461095f919061168b565b60048501554360038501556006546109819067ffffffffffffffff1682611639565b60056000828254610992919061168b565b90915550505050505050565b6000600182815481106109b3576109b36115af565b6000918252602080832085845260028252604080852033865290925290832080546006939093029091016001810180549195509193906109f490849061165b565b90915550508154815460405163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a70919061166e565b508054604051908152839033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a360008082556001909101555050565b60015460005b81811015610ae057610ad081610892565b610ad98161169e565b9050610abf565b5050565b610aec61133d565b610af66000611397565b565b610b0061133d565b8015610b0e57610b0e610ab9565b6000824311610b1d5782610b1f565b435b600454909150610b40908690600160801b90046001600160801b0316611602565b600480546001600160801b03908116600160801b938216939093029290921790556040805160c0810182526001600160a01b039687168152600060208201818152988416928201928352606082019485526080820181815260a08301978852600180548082018255925291517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf66006909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919099161790975596517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf7870155517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf8860180546fffffffffffffffffffffffffffffffff191691909216179055517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf98401555091517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa82015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb90910155565b60035460065460055460405163a9059cbb60e01b81526001600160a01b036801000000000000000090930483166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a919061166e565b506000600555565b6006546801000000000000000090046001600160a01b03163314610dc85760405162461bcd60e51b815260206004820152600f60248201527f6f6e6c7920666f756e646174696f6e000000000000000000000000000000000060448201526064016106b7565b600680546001600160a01b0390921668010000000000000000027fffffffff0000000000000000000000000000000000000000ffffffffffffffff909216919091179055565b600060018281548110610e2357610e236115af565b60009182526020808320858452600282526040808520338652909252922060069091029091019150610e5483610892565b805415610f4f57600064e8d4a5100083600401548360000154610e779190611622565b610e819190611639565b90506000826001015482610e95919061165b565b90508015610f145760035460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f12919061166e565b505b60018301829055604051818152859033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495490602001610883565b505050565b600060018381548110610f6957610f696115af565b60009182526020808320868452600282526040808520338652909252922060069091029091019150610f9a84610892565b805415611057576000816001015464e8d4a5100084600401548460000154610fc29190611622565b610fcc9190611639565b610fd6919061165b565b905080156110555760035460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561102f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611053919061166e565b505b505b82156111245781546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156110cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f0919061166e565b5082826001016000828254611105919061168b565b909155505080548390829060009061111e90849061168b565b90915550505b6004820154815464e8d4a510009161113b91611622565b6111459190611639565b6001820155604051838152849033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200160405180910390a350505050565b61118f61133d565b6001600160a01b03811661120b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106b7565b61121481611397565b50565b6000806001848154811061122d5761122d6115af565b600091825260208083208784526002825260408085206001600160a01b0389168652909252922060046006909202909201908101546001820154600383015492945090914311801561127e57508015155b15611303576000846003015443611295919061165b565b60045460028701549192506000916001600160801b03600160801b8304811692918116916112c4911685611622565b6112ce9190611622565b6112d89190611639565b9050826112ea8264e8d4a51000611622565b6112f49190611639565b6112fe908561168b565b935050505b6001830154835464e8d4a510009061131c908590611622565b6113269190611639565b611330919061165b565b9450505050505b92915050565b6000546001600160a01b03163314610af65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b7565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160801b038116811461140b57600080fd5b919050565b801515811461121457600080fd5b60008060006060848603121561143357600080fd5b83359250611443602085016113f4565b9150604084013561145381611410565b809150509250925092565b60006020828403121561147057600080fd5b5035919050565b6001600160a01b038116811461121457600080fd5b600080600080608085870312156114a257600080fd5b84356114ad81611477565b93506114bb602086016113f4565b925060408501356114cb81611477565b9150606085013567ffffffffffffffff811681146114e857600080fd5b939692955090935050565b6000806040838503121561150657600080fd5b50508035926020909101359150565b6000806000806080858703121561152b57600080fd5b611534856113f4565b9350602085013561154481611477565b92506040850135915060608501356114e881611410565b6000806040838503121561156e57600080fd5b82359150602083013561158081611477565b809150509250929050565b60006020828403121561159d57600080fd5b81356115a881611477565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6001600160801b038281168282160390808211156115fb576115fb6115c5565b5092915050565b6001600160801b038181168382160190808211156115fb576115fb6115c5565b8082028115828204841417611337576113376115c5565b60008261165657634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611337576113376115c5565b60006020828403121561168057600080fd5b81516115a881611410565b80820180821115611337576113376115c5565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116cf576116cf6115c5565b506001019056fea2646970667358221220cc4f5389e3ec59b036af978437daf31112ad1dd96b019ef3dc38bd770d990d7164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/MasterChef.sol:MasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 241,
        "contract": "src/MasterChef.sol:MasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(PoolInfo)237_storage)dyn_storage"
      },
      {
        "astId": 248,
        "contract": "src/MasterChef.sol:MasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)223_storage))"
      },
      {
        "astId": 251,
        "contract": "src/MasterChef.sol:MasterChef",
        "label": "eggToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)190"
      },
      {
        "astId": 253,
        "contract": "src/MasterChef.sol:MasterChef",
        "label": "eggPerBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint128"
      },
      {
        "astId": 255,
        "contract": "src/MasterChef.sol:MasterChef",
        "label": "totalAllocPoint",
        "offset": 16,
        "slot": "4",
        "type": "t_uint128"
      },
      {
        "astId": 257,
        "contract": "src/MasterChef.sol:MasterChef",
        "label": "foundationBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 259,
        "contract": "src/MasterChef.sol:MasterChef",
        "label": "foundationProportion",
        "offset": 0,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 261,
        "contract": "src/MasterChef.sol:MasterChef",
        "label": "foundation",
        "offset": 8,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)237_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)237_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)223_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)223_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)223_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)223_storage)"
      },
      "t_struct(PoolInfo)237_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.PoolInfo",
        "members": [
          {
            "astId": 226,
            "contract": "src/MasterChef.sol:MasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)190"
          },
          {
            "astId": 228,
            "contract": "src/MasterChef.sol:MasterChef",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 230,
            "contract": "src/MasterChef.sol:MasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 232,
            "contract": "src/MasterChef.sol:MasterChef",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 234,
            "contract": "src/MasterChef.sol:MasterChef",
            "label": "accEggPerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 236,
            "contract": "src/MasterChef.sol:MasterChef",
            "label": "startBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)223_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.UserInfo",
        "members": [
          {
            "astId": 220,
            "contract": "src/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 222,
            "contract": "src/MasterChef.sol:MasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}